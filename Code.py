import asyncio
import random
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F
from aiogram.enums import ChatType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8122435242:AAEh8dBz0Sv7-j7f0sIbJTkooEBxZNOhXTA"
ADMIN_ID = 7646557774

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DATA_FILE = "users_data.json"

# –†–µ–¥–∫–æ—Å—Ç–∏ —Å–Ω—é—Å–æ–≤ (–æ—Ç —Ö—É–¥—à–µ–π –∫ –ª—É—á—à–µ–π)
RARITIES = {
    "–û–±—ã—á–Ω—ã–π": {"emoji": "‚ö™", "color": "#808080", "drop_chance": 45},
    "–ù–µ–æ–±—ã—á–Ω—ã–π": {"emoji": "üü¢", "color": "#00FF00", "drop_chance": 30},
    "–†–µ–¥–∫–∏–π": {"emoji": "üîµ", "color": "#0080FF", "drop_chance": 15},
    "–≠–ø–∏—á–µ—Å–∫–∏–π": {"emoji": "üü£", "color": "#8000FF", "drop_chance": 8},
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": {"emoji": "üü°", "color": "#FFD700", "drop_chance": 2}
}

# –í–∏–¥—ã —Å–Ω—é—Å–æ–≤
SNUS_TYPES = [
    "Siberia", "Odens", "Skruf", "General", "G√∂teborgs Rap√©","TON snus","Telegram snus"
    "Ettan", "Catch", "Nick & Johnny", "Thunder", "Kaliber","FAME snus ","Urban snus"
    "Lundgrens", "Kapten", "Kronan", "Prima Fint", "Granit","swag snus",
]

# –ö–µ–π—Å—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
CASES = {
    "–ù–æ–≤–∏—á–æ–∫": {"price": 500, "emoji": "üì¶", "description": "–ü—Ä–æ—Å—Ç–æ–π –∫–µ–π—Å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"},
    "–°—Ä–µ–¥–Ω–∏–π": {"price": 1000, "emoji": "üéÅ", "description": "–•–æ—Ä–æ—à–∏–π —à–∞–Ω—Å –Ω–∞ —Ä–µ–¥–∫–∏–µ —Å–Ω—é—Å—ã"},
    "–ü—Ä–µ–º–∏—É–º": {"price": 2500, "emoji": "üíé", "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –Ω–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–Ω—é—Å—ã"}
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
CATALOG_ITEMS_PER_PAGE = 8

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã (–ø–æ –¥–Ω—è–º)
DAILY_BONUSES = {
    1: {"coins": 100, "bonus": None},
    2: {"coins": 150, "bonus": None},
    3: {"coins": 200, "bonus": None},
    4: {"coins": 300, "bonus": None},
    5: {"coins": 400, "bonus": None},
    6: {"coins": 500, "bonus": None},
    7: {"coins": 700, "bonus": "free_case"}  # –ë–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å –Ω–∞ 7 –¥–µ–Ω—å
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É–ª–µ—Ç–∫–∏
ROULETTE_MULTIPLIERS = {
    "üí•": {"name": "–ü—Ä–æ–∏–≥—Ä—ã—à", "multiplier": 0, "chance": 40, "color": "üî¥"},
    "üí∞": {"name": "x1.5", "multiplier": 1.5, "chance": 30, "color": "üü°"},
    "üíé": {"name": "x2", "multiplier": 2, "chance": 20, "color": "üîµ"},
    "üöÄ": {"name": "x3", "multiplier": 3, "chance": 8, "color": "üü£"},
    "‚≠ê": {"name": "x5", "multiplier": 5, "chance": 2, "color": "üü†"}
}


class UserData:
    def __init__(self):
        self.coins = 0
        self.inventory = {}  # {snus_name: {rarity: count}}
        self.last_free_snus = None
        self.last_coin_farm = None
        self.total_free_snus = 0
        self.active_trades = []
        self.daily_bonus_streak = 0
        self.last_daily_bonus = None
        self.total_roulette_games = 0
        self.roulette_wins = 0


def load_users_data() -> Dict:
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç—ã UserData
                for user_id in data:
                    if isinstance(data[user_id], dict):
                        user_data = UserData()
                        user_data.__dict__.update(data[user_id])
                        data[user_id] = user_data
                return data
        except:
            pass
    return {}


def save_users_data(data: Dict):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã UserData –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    save_data = {}
    for user_id, user_data in data.items():
        save_data[user_id] = user_data.__dict__

    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(save_data, f, ensure_ascii=False, indent=2, default=str)


users_data = load_users_data()


def get_user_data(user_id: int) -> UserData:
    if str(user_id) not in users_data:
        users_data[str(user_id)] = UserData()
    return users_data[str(user_id)]

def is_group_chat(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–π"""
    return message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]

def generate_random_snus():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–Ω—é—Å —Å —É—á–µ—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    rand = random.randint(1, 100)
    cumulative = 0

    for rarity, data in RARITIES.items():
        cumulative += data["drop_chance"]
        if rand <= cumulative:
            snus_type = random.choice(SNUS_TYPES)
            return snus_type, rarity

    # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π
    return random.choice(SNUS_TYPES), "–û–±—ã—á–Ω—ã–π"


def add_snus_to_inventory(user_data: UserData, snus_type: str, rarity: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–Ω—é—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if snus_type not in user_data.inventory:
        user_data.inventory[snus_type] = {}

    if rarity not in user_data.inventory[snus_type]:
        user_data.inventory[snus_type][rarity] = 0

    user_data.inventory[snus_type][rarity] += 1


def can_get_free_snus(user_data: UserData) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–Ω—é—Å"""
    if not user_data.last_free_snus:
        return True

    if isinstance(user_data.last_free_snus, str):
        last_time = datetime.fromisoformat(user_data.last_free_snus)
    else:
        last_time = user_data.last_free_snus

    return datetime.now() - last_time >= timedelta(hours=1)


def can_get_daily_bonus(user_data: UserData) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
    if not user_data.last_daily_bonus:
        return True

    if isinstance(user_data.last_daily_bonus, str):
        last_time = datetime.fromisoformat(user_data.last_daily_bonus)
    else:
        last_time = user_data.last_daily_bonus

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª–µ–µ 20 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
    return datetime.now() - last_time >= timedelta(hours=20)


def update_daily_streak(user_data: UserData):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Ä–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤"""
    now = datetime.now()

    if not user_data.last_daily_bonus:
        user_data.daily_bonus_streak = 1
    else:
        if isinstance(user_data.last_daily_bonus, str):
            last_time = datetime.fromisoformat(user_data.last_daily_bonus)
        else:
            last_time = user_data.last_daily_bonus

        hours_passed = (now - last_time).total_seconds() / 3600

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 48 —á–∞—Å–æ–≤ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Ä–∏—é
        if hours_passed <= 48:
            user_data.daily_bonus_streak += 1
            if user_data.daily_bonus_streak > 7:
                user_data.daily_bonus_streak = 1  # –°–±—Ä–æ—Å –ø–æ—Å–ª–µ 7 –¥–Ω—è
        else:
            # –°–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞
            user_data.daily_bonus_streak = 1

    user_data.last_daily_bonus = now


def can_farm_coins(user_data: UserData) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã"""
    if not user_data.last_coin_farm:
        return True

    if isinstance(user_data.last_coin_farm, str):
        last_time = datetime.fromisoformat(user_data.last_coin_farm)
    else:
        last_time = user_data.last_coin_farm

    return datetime.now() - last_time >= timedelta(minutes=30)


def spin_roulette(bet_amount):
    """–ö—Ä—É—Ç–∏—Ç —Ä—É–ª–µ—Ç–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    rand = random.randint(1, 100)
    cumulative = 0

    for symbol, data in ROULETTE_MULTIPLIERS.items():
        cumulative += data["chance"]
        if rand <= cumulative:
            multiplier = data["multiplier"]
            win_amount = int(bet_amount * multiplier)
            return symbol, data["name"], multiplier, win_amount, data["color"]

    # Fallback
    return "üí•", "–ü—Ä–æ–∏–≥—Ä—ã—à", 0, 0, "üî¥"

def create_catalog_page(page: int = 0) -> tuple:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    total_pages = (len(SNUS_TYPES) - 1) // CATALOG_ITEMS_PER_PAGE + 1

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if page < 0:
        page = 0
    elif page >= total_pages:
        page = total_pages - 1

    start_idx = page * CATALOG_ITEMS_PER_PAGE
    end_idx = min(start_idx + CATALOG_ITEMS_PER_PAGE, len(SNUS_TYPES))
    page_items = SNUS_TYPES[start_idx:end_idx]

    catalog_text = f"""
üìö <b>–ö–∞—Ç–∞–ª–æ–≥ —Å–Ω—é—Å–æ–≤</b>

üìä –í—Å–µ–≥–æ —Å–Ω—é—Å–æ–≤ –≤ –∏–≥—Ä–µ: {len(SNUS_TYPES)}
üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}

üî∏ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–Ω—é—Å—ã:</b>
"""

    for i, snus in enumerate(page_items, start_idx + 1):
        catalog_text += f"\n{i}. <b>{snus}</b>"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–ª—è —Å–Ω—é—Å–∞
        rarities_text = " | ".join([f"{RARITIES[rarity]['emoji']}{rarity}" for rarity in RARITIES.keys()])
        catalog_text += f"\n   {rarities_text}"

    return catalog_text, page, total_pages


def create_catalog_keyboard(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É"""
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"catalog_page_{current_page - 1}"))
    if current_page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"catalog_page_{current_page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–¥–∫–æ—Å—Ç—è—Ö
    keyboard.append([InlineKeyboardButton(text="üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–¥–∫–æ—Å—Ç—è—Ö", callback_data="show_rarities_info")])

    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"catalog_page_{current_page}")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_data = get_user_data(message.from_user.id)

    welcome_text = f"""
üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–Ω—é—Å –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä!</b> üéØ

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! 
–°–æ–±–∏—Ä–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–Ω—é—Å–æ–≤ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–∏–º –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–º!

üéÆ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/get - –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–Ω—é—Å (—Ä–∞–∑ –≤ —á–∞—Å)
/profile - –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è
/catalog - –ö–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö —Å–Ω—é—Å–æ–≤ –≤ –∏–≥—Ä–µ
/shop - –ú–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤
/farm - –ü–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã (—Ä–∞–∑ –≤ 30 –º–∏–Ω)
/daily - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (–∫–∞–∂–¥—ã–µ 20 —á–∞—Å–æ–≤)
/roulette - –°–Ω—é—Å —Ä—É–ª–µ—Ç–∫–∞ (–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫–∏!)
/pay_reply - –ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç (–æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/pay_id - –ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç –ø–æ ID
/trade - –¢–æ—Ä–≥–æ–≤–ª—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏

üíé <b>–†–µ–¥–∫–æ—Å—Ç–∏ —Å–Ω—é—Å–æ–≤:</b>
‚ö™ –û–±—ã—á–Ω—ã–π - 45%
üü¢ –ù–µ–æ–±—ã—á–Ω—ã–π - 30% 
üîµ –†–µ–¥–∫–∏–π - 15%
üü£ –≠–ø–∏—á–µ—Å–∫–∏–π - 8%
üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π - 2%

–£–¥–∞—á–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏! üçÄ
    """

    await message.answer(welcome_text, parse_mode="HTML")
    save_users_data(users_data)


@dp.message(Command("get"))
async def get_free_snus(message: types.Message):
    user_data = get_user_data(message.from_user.id)

    if not can_get_free_snus(user_data):
        time_left = timedelta(hours=1) - (datetime.now() - datetime.fromisoformat(str(user_data.last_free_snus)))
        minutes_left = int(time_left.total_seconds() // 60)
        await message.answer(f"‚è∞ –ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {minutes_left} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å–Ω—é—Å–∞!")
        return

    snus_type, rarity = generate_random_snus()
    add_snus_to_inventory(user_data, snus_type, rarity)
    user_data.last_free_snus = datetime.now()
    user_data.total_free_snus += 1

    rarity_emoji = RARITIES[rarity]["emoji"]

    text = f"""
üéÅ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> 

–¢—ã –ø–æ–ª—É—á–∏–ª: {rarity_emoji} <b>{snus_type}</b> ({rarity})

‚ú® –°–ª–µ–¥—É—é—â–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–Ω—é—Å —á–µ—Ä–µ–∑ 1 —á–∞—Å!
    """

    await message.answer(text, parse_mode="HTML")
    save_users_data(users_data)


@dp.message(Command("profile"))
async def show_profile(message: types.Message):
    user_data = get_user_data(message.from_user.id)

    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–Ω—é—Å–æ–≤
    total_snus = 0
    rarity_counts = {rarity: 0 for rarity in RARITIES.keys()}

    for snus_type, rarities in user_data.inventory.items():
        for rarity, count in rarities.items():
            total_snus += count
            if rarity in rarity_counts:
                rarity_counts[rarity] += count

    profile_text = f"""
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å {message.from_user.first_name}</b>
üÜî ID: {message.from_user.id}

üí∞ –ú–æ–Ω–µ—Ç—ã: {user_data.coins}
üì¶ –í—Å–µ–≥–æ —Å–Ω—é—Å–æ–≤: {total_snus}
üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–Ω—é—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {user_data.total_free_snus}

üìä <b>–ü–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º:</b>
"""

    for rarity, count in rarity_counts.items():
        emoji = RARITIES[rarity]["emoji"]
        profile_text += f"{emoji} {rarity}: {count}\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å–Ω—é—Å–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if user_data.inventory:
        profile_text += "\nüèÜ <b>–¢–≤–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è:</b>\n"

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–Ω—é—Å–æ–≤ —Å –∏—Ö —Ä–µ–¥–∫–æ—Å—Ç—è–º–∏
        all_snus = []
        for snus_type, rarities in user_data.inventory.items():
            for rarity, count in rarities.items():
                all_snus.extend([(snus_type, rarity)] * count)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        shown_count = 0
        shown_items = set()
        for snus_type, rarities in user_data.inventory.items():
            for rarity, count in rarities.items():
                if shown_count >= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –ø–æ–∑–∏—Ü–∏–π
                    break
                emoji = RARITIES[rarity]["emoji"]
                profile_text += f"{emoji} {snus_type} ({rarity}) x{count}\n"
                shown_count += 1
            if shown_count >= 10:
                break

        if total_snus > 10:
            profile_text += f"\n... –∏ –µ—â–µ {total_snus - 10} —Å–Ω—é—Å–æ–≤"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_profile")]
    ])

    await message.answer(profile_text, parse_mode="HTML", reply_markup=keyboard)


@dp.message(Command("catalog"))
async def show_catalog(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö —Å–Ω—é—Å–æ–≤ –≤ –∏–≥—Ä–µ"""
    catalog_text, current_page, total_pages = create_catalog_page(0)
    keyboard = create_catalog_keyboard(current_page, total_pages)

    await message.answer(catalog_text, parse_mode="HTML", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("catalog_page_"))
async def catalog_page_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ç–∞–ª–æ–≥–∞"""
    try:
        page = int(callback.data.replace("catalog_page_", ""))
        catalog_text, current_page, total_pages = create_catalog_page(page)
        keyboard = create_catalog_keyboard(current_page, total_pages)

        await callback.message.edit_text(catalog_text, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã!")


@dp.callback_query(F.data == "show_rarities_info")
async def show_rarities_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∫–æ—Å—Ç—è—Ö"""
    rarities_text = """
üíé <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–¥–∫–æ—Å—Ç—è—Ö</b>

–ö–∞–∂–¥—ã–π —Å–Ω—é—Å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –æ–¥–Ω—É –∏–∑ 5 —Ä–µ–¥–∫–æ—Å—Ç–µ–π:

"""

    for rarity, data in RARITIES.items():
        rarities_text += f"{data['emoji']} <b>{rarity}</b> - {data['drop_chance']}%\n"

    rarities_text += """
üìà <b>–®–∞–Ω—Å—ã –ø–æ–ª—É—á–µ–Ω–∏—è:</b>
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–Ω—é—Å (/get) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–Ω—Å—ã
‚Ä¢ –ö–µ–π—Å "–ù–æ–≤–∏—á–æ–∫" - —É–ª—É—á—à–µ–Ω–Ω—ã–µ —à–∞–Ω—Å—ã –Ω–∞ —Ä–µ–¥–∫–∏–µ
‚Ä¢ –ö–µ–π—Å "–°—Ä–µ–¥–Ω–∏–π" - —Ö–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã –Ω–∞ —ç–ø–∏—á–µ—Å–∫–∏–µ  
‚Ä¢ –ö–µ–π—Å "–ü—Ä–µ–º–∏—É–º" - —à–∞–Ω—Å –Ω–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ!

üí° –°–æ–±–∏—Ä–∞–π —Å–Ω—é—Å—ã –≤—Å–µ—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π!
"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog_page_0")]
    ])

    await callback.message.edit_text(rarities_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


@dp.message(Command("daily"))
async def daily_bonus(message: types.Message):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
    user_data = get_user_data(message.from_user.id)

    if not can_get_daily_bonus(user_data):
        time_left = timedelta(hours=20) - (datetime.now() - datetime.fromisoformat(str(user_data.last_daily_bonus)))
        hours_left = int(time_left.total_seconds() // 3600)
        minutes_left = int((time_left.total_seconds() % 3600) // 60)
        await message.answer(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {hours_left}—á {minutes_left}–º!")
        return

    update_daily_streak(user_data)
    current_day = user_data.daily_bonus_streak
    bonus_data = DAILY_BONUSES[current_day]

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
    user_data.coins += bonus_data["coins"]

    bonus_text = f"""
üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!</b>

üìÖ –î–µ–Ω—å {current_day}/7
üí∞ –ü–æ–ª—É—á–µ–Ω–æ: +{bonus_data["coins"]} –º–æ–Ω–µ—Ç
üí≥ –ë–∞–ª–∞–Ω—Å: {user_data.coins} –º–æ–Ω–µ—Ç
"""

    # –ë–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å –Ω–∞ 7 –¥–µ–Ω—å
    if bonus_data["bonus"] == "free_case":
        snus_type, rarity = generate_random_snus()
        add_snus_to_inventory(user_data, snus_type, rarity)
        rarity_emoji = RARITIES[rarity]["emoji"]
        bonus_text += f"\nüéâ <b>–ë–û–ù–£–° 7-–≥–æ –î–ù–Ø!</b>\nüéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–Ω—é—Å: {rarity_emoji} {snus_type} ({rarity})"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
    if current_day < 7:
        next_bonus = DAILY_BONUSES[current_day + 1]["coins"]
        bonus_text += f"\n\nüìà –ó–∞–≤—Ç—Ä–∞: +{next_bonus} –º–æ–Ω–µ—Ç"
    else:
        bonus_text += f"\n\nüîÑ –ó–∞–≤—Ç—Ä–∞ —Å–µ—Ä–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ!"

    bonus_text += f"\n‚è∞ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ 20 —á–∞—Å–æ–≤"

    await message.answer(bonus_text, parse_mode="HTML")
    save_users_data(users_data)


@dp.message(Command("roulette"))
async def roulette_menu(message: types.Message):
    """–ú–µ–Ω—é —Ä—É–ª–µ—Ç–∫–∏"""
    user_data = get_user_data(message.from_user.id)

    roulette_text = f"""
üé∞ <b>–°–Ω—é—Å –†—É–ª–µ—Ç–∫–∞</b>

üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user_data.coins}
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data.total_roulette_games}
üèÜ –í—ã–∏–≥—Ä—ã—à–µ–π: {user_data.roulette_wins}

üéØ <b>–®–∞–Ω—Å—ã –≤—ã–∏–≥—Ä—ã—à–∞:</b>
üí• –ü—Ä–æ–∏–≥—Ä—ã—à - 40%
üí∞ x1.5 - 30%
üíé x2 - 20%  
üöÄ x3 - 8%
‚≠ê x5 - 2%

üí° –í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏:
"""

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞–≤–æ–∫
    keyboard = []
    bet_amounts = [50, 100, 250, 500, 2000, 6700]

    for i in range(0, len(bet_amounts), 2):
        row = []
        for j in range(2):
            if i + j < len(bet_amounts):
                amount = bet_amounts[i + j]
                if user_data.coins >= amount:
                    row.append(InlineKeyboardButton(
                        text=f"üí∞ {amount} –º–æ–Ω–µ—Ç",
                        callback_data=f"roulette_bet_{amount}"
                    ))
                else:
                    row.append(InlineKeyboardButton(
                        text=f"‚ùå {amount} –º–æ–Ω–µ—Ç",
                        callback_data="insufficient_funds"
                    ))
        keyboard.append(row)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
    if user_data.coins >= 1000:
        keyboard.append([InlineKeyboardButton(
            text=f"üî• –í–°–Å –ò–õ–ò –ù–ò–ß–ï–ì–û ({user_data.coins} –º–æ–Ω–µ—Ç)",
            callback_data=f"roulette_bet_{user_data.coins}"
        )])

    keyboard_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(roulette_text, parse_mode="HTML", reply_markup=keyboard_markup)


@dp.callback_query(F.data.startswith("roulette_bet_"))
async def roulette_spin(callback: CallbackQuery):
    """–ö—Ä—É—Ç–∏—Ç —Ä—É–ª–µ—Ç–∫—É"""
    try:
        bet_amount = int(callback.data.replace("roulette_bet_", ""))
        user_data = get_user_data(callback.from_user.id)

        if user_data.coins < bet_amount:
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
            return

        # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
        user_data.coins -= bet_amount
        user_data.total_roulette_games += 1

        # –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É
        symbol, name, multiplier, win_amount, color = spin_roulette(bet_amount)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        user_data.coins += win_amount

        if win_amount > bet_amount:
            user_data.roulette_wins += 1

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è
        spinning_text = """
üé∞ <b>–†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è...</b>

üí• üí∞ üíé üöÄ ‚≠ê
üí∞ üíé üöÄ ‚≠ê üí•  
üíé üöÄ ‚≠ê üí• üí∞
        """

        await callback.message.edit_text(spinning_text, parse_mode="HTML")
        await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if win_amount > bet_amount:
            result_text = f"""
üéâ <b>–í–´–ò–ì–†–´–®!</b> 

üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {color} {symbol} {name}
üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç
üèÜ –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç
üìà –ü—Ä–∏–±—ã–ª—å: +{win_amount - bet_amount} –º–æ–Ω–µ—Ç

üí≥ –ë–∞–ª–∞–Ω—Å: {user_data.coins} –º–æ–Ω–µ—Ç
"""
        elif win_amount == bet_amount:
            result_text = f"""
üòê <b>–í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏</b>

üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {color} {symbol} {name}  
üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç
üîÑ –í–æ–∑–≤—Ä–∞—Ç: {win_amount} –º–æ–Ω–µ—Ç

üí≥ –ë–∞–ª–∞–Ω—Å: {user_data.coins} –º–æ–Ω–µ—Ç
"""
        else:
            result_text = f"""
üí• <b>–ü—Ä–æ–∏–≥—Ä—ã—à!</b>

üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {color} {symbol} {name}
üí∞ –ü–æ—Ç–µ—Ä—è–Ω–æ: {bet_amount} –º–æ–Ω–µ—Ç

üí≥ –ë–∞–ª–∞–Ω—Å: {user_data.coins} –º–æ–Ω–µ—Ç
"""

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        keyboard = []
        if user_data.coins >= 50:
            keyboard.append([InlineKeyboardButton(text="üé∞ –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="roulette_again")])

        keyboard.append([InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="roulette_stats")])

        keyboard_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(result_text, parse_mode="HTML", reply_markup=keyboard_markup)

        save_users_data(users_data)

    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏!")

@dp.callback_query(F.data == "roulette_again")
async def roulette_again(callback: CallbackQuery):
    """–ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É –µ—â–µ —Ä–∞–∑"""
    user_data = get_user_data(callback.from_user.id)

    roulette_text = f"""
üé∞ <b>–°–Ω—é—Å –†—É–ª–µ—Ç–∫–∞</b>

üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user_data.coins}
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data.total_roulette_games}
üèÜ –í—ã–∏–≥—Ä—ã—à–µ–π: {user_data.roulette_wins}

üéØ <b>–®–∞–Ω—Å—ã –≤—ã–∏–≥—Ä—ã—à–∞:</b>
üí• –ü—Ä–æ–∏–≥—Ä—ã—à - 40%
üí∞ x1.5 - 30%
üíé x2 - 20%  
üöÄ x3 - 8%
‚≠ê x5 - 2%

üí° –í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏:
"""

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞–≤–æ–∫
    keyboard = []
    bet_amounts = [50, 100, 250, 500, 2000, 6700]

    for i in range(0, len(bet_amounts), 2):
        row = []
        for j in range(2):
            if i + j < len(bet_amounts):
                amount = bet_amounts[i + j]
                if user_data.coins >= amount:
                    row.append(InlineKeyboardButton(
                        text=f"üí∞ {amount} –º–æ–Ω–µ—Ç",
                        callback_data=f"roulette_bet_{amount}"
                    ))
                else:
                    row.append(InlineKeyboardButton(
                        text=f"‚ùå {amount} –º–æ–Ω–µ—Ç",
                        callback_data="insufficient_funds"
                    ))
        keyboard.append(row)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
    if user_data.coins >= 1000:
        keyboard.append([InlineKeyboardButton(
            text=f"üî• –í–°–Å –ò–õ–ò –ù–ò–ß–ï–ì–û ({user_data.coins} –º–æ–Ω–µ—Ç)",
            callback_data=f"roulette_bet_{user_data.coins}"
        )])

    keyboard_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.edit_text(roulette_text, parse_mode="HTML", reply_markup=keyboard_markup)
    await callback.answer()

@dp.message(Command("farm"))
async def farm_coins(message: types.Message):
    user_data = get_user_data(message.from_user.id)

    if not can_farm_coins(user_data):
        time_left = timedelta(minutes=30) - (datetime.now() - datetime.fromisoformat(str(user_data.last_coin_farm)))
        minutes_left = int(time_left.total_seconds() // 60)
        await message.answer(f"‚è∞ –ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {minutes_left} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞ –º–æ–Ω–µ—Ç!")
        return

    coins_earned = random.randint(100, 250)
    user_data.coins += coins_earned
    user_data.last_coin_farm = datetime.now()

    text = f"""
üí∞ <b>–ú–æ–Ω–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!</b>

–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª: +{coins_earned} –º–æ–Ω–µ—Ç
üí≥ –ë–∞–ª–∞–Ω—Å: {user_data.coins} –º–æ–Ω–µ—Ç

‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Ñ–∞—Ä–º —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç!
    """

    await message.answer(text, parse_mode="HTML")
    save_users_data(users_data)



@dp.message(Command("shop"))
async def show_shop(message: types.Message):
    user_data = get_user_data(message.from_user.id)

    shop_text = f"""
üõí <b>–ú–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤</b>

üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã: {user_data.coins}

üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã:</b>
"""

    keyboard_buttons = []
    for case_name, case_data in CASES.items():
        shop_text += f"\n{case_data['emoji']} <b>{case_name}</b> - {case_data['price']} –º–æ–Ω–µ—Ç\n"
        shop_text += f"   {case_data['description']}\n"

        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{case_data['emoji']} {case_name} ({case_data['price']} –º–æ–Ω–µ—Ç)",
                callback_data=f"buy_case_{case_name}"
            )
        ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.answer(shop_text, parse_mode="HTML", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("buy_case_"))
async def buy_case(callback: CallbackQuery):
    case_name = callback.data.replace("buy_case_", "")
    user_data = get_user_data(callback.from_user.id)

    if case_name not in CASES:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–µ–π—Å!")
        return

    case_price = CASES[case_name]["price"]

    if user_data.coins < case_price:
        await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ {case_price}, —É —Ç–µ–±—è {user_data.coins}")
        return

    user_data.coins -= case_price

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–Ω—é—Å –∏–∑ –∫–µ–π—Å–∞ (—É–ª—É—á—à–µ–Ω–Ω—ã–µ —à–∞–Ω—Å—ã –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö –∫–µ–π—Å–æ–≤)
    if case_name == "–ù–æ–≤–∏—á–æ–∫":
        chances = {"–û–±—ã—á–Ω—ã–π": 50, "–ù–µ–æ–±—ã—á–Ω—ã–π": 35, "–†–µ–¥–∫–∏–π": 15, "–≠–ø–∏—á–µ—Å–∫–∏–π": 0, "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": 0}
    elif case_name == "–°—Ä–µ–¥–Ω–∏–π":
        chances = {"–û–±—ã—á–Ω—ã–π": 30, "–ù–µ–æ–±—ã—á–Ω—ã–π": 40, "–†–µ–¥–∫–∏–π": 20, "–≠–ø–∏—á–µ—Å–∫–∏–π": 10, "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": 0}
    else:  # –ü—Ä–µ–º–∏—É–º
        chances = {"–û–±—ã—á–Ω—ã–π": 10, "–ù–µ–æ–±—ã—á–Ω—ã–π": 30, "–†–µ–¥–∫–∏–π": 35, "–≠–ø–∏—á–µ—Å–∫–∏–π": 20, "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": 5}

    rand = random.randint(1, 100)
    cumulative = 0
    selected_rarity = "–û–±—ã—á–Ω—ã–π"

    for rarity, chance in chances.items():
        cumulative += chance
        if rand <= cumulative:
            selected_rarity = rarity
            break

    snus_type = random.choice(SNUS_TYPES)
    add_snus_to_inventory(user_data, snus_type, selected_rarity)

    rarity_emoji = RARITIES[selected_rarity]["emoji"]
    case_emoji = CASES[case_name]["emoji"]

    result_text = f"""
üéâ <b>–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç!</b>

{case_emoji} –ö–µ–π—Å: {case_name}
üéÅ –ü–æ–ª—É—á–µ–Ω: {rarity_emoji} <b>{snus_type}</b> ({selected_rarity})

üí∞ –û—Å—Ç–∞—Ç–æ–∫ –º–æ–Ω–µ—Ç: {user_data.coins}
    """

    await callback.message.edit_text(result_text, parse_mode="HTML")
    await callback.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ü–æ–ª—É—á–µ–Ω {selected_rarity} {snus_type}!")
    save_users_data(users_data)


@dp.message(Command("trade"))
async def trade_menu(message: types.Message):
    trade_text = """
ü§ù <b>–¢–æ—Ä–≥–æ–≤–ª—è</b>

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å—Å—è —Å–Ω—é—Å–∞–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!

üìã <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>
/trade_offer @username - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/trade_list - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
/trade_accept [ID] - –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞

üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ü—Ä–µ–¥–ª–æ–∂–∏ –æ–±–º–µ–Ω –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
2. –í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ —Å–Ω—é—Å—ã –¥–ª—è –æ–±–º–µ–Ω–∞  
3. –î–æ–∂–¥–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
4. –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!
    """

    await message.answer(trade_text, parse_mode="HTML")


@dp.callback_query(F.data == "refresh_profile")
async def refresh_profile(callback: CallbackQuery):
    await callback.message.delete()
    await show_profile(callback.message)
    await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!")


@dp.message(Command("admin_balance"))
async def admin_give_balance(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        # –ö–æ–º–∞–Ω–¥–∞: /admin_balance 1000
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏ —Å—É–º–º—É: /admin_balance 1000")
            return

        amount = int(args[1])
        user_data = get_user_data(message.from_user.id)
        user_data.coins += amount

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç!\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_data.coins}")
        save_users_data(users_data)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!")


@dp.message(Command("admin_snus"))
async def admin_give_snus(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        # –ö–æ–º–∞–Ω–¥–∞: /admin_snus Siberia –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π 5
        args = message.text.split()
        if len(args) < 4:
            await message.answer(
                "‚ùå –§–æ—Ä–º–∞—Ç: /admin_snus [—Ç–∏–ø] [—Ä–µ–¥–∫–æ—Å—Ç—å] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]\n–ü—Ä–∏–º–µ—Ä: /admin_snus Siberia –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π 5")
            return

        snus_type = args[1]
        rarity = args[2]
        count = int(args[3])

        if snus_type not in SNUS_TYPES:
            await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–Ω—é—Å–∞: {snus_type}")
            return

        if rarity not in RARITIES:
            await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: {rarity}")
            return

        user_data = get_user_data(message.from_user.id)
        for _ in range(count):
            add_snus_to_inventory(user_data, snus_type, rarity)

        rarity_emoji = RARITIES[rarity]["emoji"]
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {count}x {rarity_emoji} {snus_type} ({rarity})")
        save_users_data(users_data)

    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!")


@dp.message(Command("admin_help"))
async def admin_help(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    help_text = """
üîß <b>–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:</b>

/admin_balance [—Å—É–º–º–∞] - –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã
/admin_snus [—Ç–∏–ø] [—Ä–µ–¥–∫–æ—Å—Ç—å] [–∫–æ–ª-–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å —Å–Ω—é—Å
/admin_help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/admin_balance 5000
/admin_snus Siberia –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π 3
    """

    await message.answer(help_text, parse_mode="HTML")

async def main():
    print("ü§ñ –°–Ω—é—Å –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("üìù –ù–µ –∑–∞–±—É–¥—å –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π BOT_TOKEN!")

    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("üîë –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –≤—Å—Ç–∞–≤–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π BOT_TOKEN")


@dp.message(Command("pay"))
async def pay_coins(message: types.Message):
    """–ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É"""
    args = message.text.split()

    if len(args) < 3:
        await message.answer("""
üí∏ <b>–ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç</b>

üìã –§–æ—Ä–º–∞—Ç: /pay @username —Å—É–º–º–∞
üìù –ü—Ä–∏–º–µ—Ä: /pay @friend 500

üí° –ü–µ—Ä–µ–≤–æ–¥–∏ –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º!
        """, parse_mode="HTML")
        return

    try:
        username = args[1].replace("@", "").lower()
        amount = int(args[2])

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        sender_data = get_user_data(message.from_user.id)

        if sender_data.coins < amount:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –£ —Ç–µ–±—è: {sender_data.coins}")
            return

        # –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ username
        recipient_id = None
        recipient_name = None

        for user_id_str, user_data in users_data.items():
            # –ó–¥–µ—Å—å –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å username –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            # –ü–æ—ç—Ç–æ–º—É –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            pass

        await message.answer(f"""
‚ùå <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ username –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>

üí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /pay_reply –æ—Ç–≤–µ—á–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞:
1. –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
2. –ù–∞–ø–∏—à–∏ /pay_reply {amount}

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /pay_id [ID] [—Å—É–º–º–∞] –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å ID –∏–≥—Ä–æ–∫–∞
        """, parse_mode="HTML")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!")


@dp.message(Command("pay_reply"))
async def pay_reply(message: types.Message):
    """–ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ reply"""
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã!")
        return

    args = message.text.split()

    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ —Å—É–º–º—É: /pay_reply 500")
        return

    try:
        amount = int(args[1])

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        sender_data = get_user_data(message.from_user.id)
        recipient_id = message.reply_to_message.from_user.id
        recipient_name = message.reply_to_message.from_user.first_name

        if sender_data.coins < amount:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –£ —Ç–µ–±—è: {sender_data.coins}")
            return

        if message.from_user.id == recipient_id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        recipient_data = get_user_data(recipient_id)
        sender_data.coins -= amount
        recipient_data.coins += amount

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await message.answer(f"""
‚úÖ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>

üí∏ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {amount} –º–æ–Ω–µ—Ç
üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_name}
üí∞ –û—Å—Ç–∞—Ç–æ–∫: {sender_data.coins} –º–æ–Ω–µ—Ç
        """, parse_mode="HTML")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞
        if not is_group_chat(message):
            try:
                await bot.send_message(
                    recipient_id,
                    f"""
üéÅ <b>–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥!</b>

üí∞ –°—É–º–º–∞: +{amount} –º–æ–Ω–µ—Ç
üë§ –û—Ç: {message.from_user.first_name}
üí≥ –ë–∞–ª–∞–Ω—Å: {recipient_data.coins} –º–æ–Ω–µ—Ç
                    """,
                    parse_mode="HTML"
                )
            except:
                pass  # –ü–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

        save_users_data(users_data)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!")


@dp.message(Command("pay_id"))
async def pay_by_id(message: types.Message):
    """–ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç –ø–æ ID"""
    args = message.text.split()

    if len(args) < 3:
        await message.answer("""
üí∏ <b>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ ID</b>

üìã –§–æ—Ä–º–∞—Ç: /pay_id [ID] [—Å—É–º–º–∞]
üìù –ü—Ä–∏–º–µ—Ä: /pay_id 123456789 500

üí° ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–≥—Ä–æ–∫–∞
        """, parse_mode="HTML")
        return

    try:
        recipient_id = int(args[1])
        amount = int(args[2])

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        sender_data = get_user_data(message.from_user.id)

        if sender_data.coins < amount:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –£ —Ç–µ–±—è: {sender_data.coins}")
            return

        if message.from_user.id == recipient_id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
        if str(recipient_id) not in users_data:
            await message.answer("‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        recipient_data = get_user_data(recipient_id)
        sender_data.coins -= amount
        recipient_data.coins += amount

        await message.answer(f"""
‚úÖ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>

üí∏ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {amount} –º–æ–Ω–µ—Ç
üÜî ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {recipient_id}
üí∞ –û—Å—Ç–∞—Ç–æ–∫: {sender_data.coins} –º–æ–Ω–µ—Ç
        """, parse_mode="HTML")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                recipient_id,
                f"""
üéÅ <b>–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥!</b>

üí∞ –°—É–º–º–∞: +{amount} –º–æ–Ω–µ—Ç
üë§ –û—Ç: {message.from_user.first_name} (ID: {message.from_user.id})
üí≥ –ë–∞–ª–∞–Ω—Å: {recipient_data.coins} –º–æ–Ω–µ—Ç
                """,
                parse_mode="HTML"
            )
        except:
            await message.answer("–î–∞–ª –∂–∏–∑–Ω–∏ –±–æ–º–∂—É üé°")

        save_users_data(users_data)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–∞ –¥–ª—è ID –∏ —Å—É–º–º—ã")

if __name__ == "__main__":
    asyncio.run(main())